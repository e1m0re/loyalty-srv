// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	models "e1m0re/loyalty-srv/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(ctx context.Context, userInfo models.UserInfo) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, userInfo)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(ctx, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), ctx, userInfo)
}

// SignIn mocks base method.
func (m *MockAuthorization) SignIn(ctx context.Context, userInfo models.UserInfo) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", ctx, userInfo)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAuthorizationMockRecorder) SignIn(ctx, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAuthorization)(nil).SignIn), ctx, userInfo)
}

// Verify mocks base method.
func (m *MockAuthorization) Verify(ctx context.Context, userInfo models.UserInfo) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", ctx, userInfo)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockAuthorizationMockRecorder) Verify(ctx, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockAuthorization)(nil).Verify), ctx, userInfo)
}

// MockOrdersService is a mock of OrdersService interface.
type MockOrdersService struct {
	ctrl     *gomock.Controller
	recorder *MockOrdersServiceMockRecorder
}

// MockOrdersServiceMockRecorder is the mock recorder for MockOrdersService.
type MockOrdersServiceMockRecorder struct {
	mock *MockOrdersService
}

// NewMockOrdersService creates a new mock instance.
func NewMockOrdersService(ctrl *gomock.Controller) *MockOrdersService {
	mock := &MockOrdersService{ctrl: ctrl}
	mock.recorder = &MockOrdersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrdersService) EXPECT() *MockOrdersServiceMockRecorder {
	return m.recorder
}

// GetLoadedOrdersByUserId mocks base method.
func (m *MockOrdersService) GetLoadedOrdersByUserId(ctx context.Context, id models.UserId) (models.OrdersList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadedOrdersByUserId", ctx, id)
	ret0, _ := ret[0].(models.OrdersList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadedOrdersByUserId indicates an expected call of GetLoadedOrdersByUserId.
func (mr *MockOrdersServiceMockRecorder) GetLoadedOrdersByUserId(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadedOrdersByUserId", reflect.TypeOf((*MockOrdersService)(nil).GetLoadedOrdersByUserId), ctx, id)
}

// LoadOrder mocks base method.
func (m *MockOrdersService) LoadOrder(ctx context.Context, orderNum models.OrderNum) (*models.Order, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadOrder", ctx, orderNum)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadOrder indicates an expected call of LoadOrder.
func (mr *MockOrdersServiceMockRecorder) LoadOrder(ctx, orderNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadOrder", reflect.TypeOf((*MockOrdersService)(nil).LoadOrder), ctx, orderNum)
}

// UpdateOrder mocks base method.
func (m *MockOrdersService) UpdateOrder(ctx context.Context, id models.OrderId, status models.OrdersStatus, accrual int) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", ctx, id, status, accrual)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrdersServiceMockRecorder) UpdateOrder(ctx, id, status, accrual interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrdersService)(nil).UpdateOrder), ctx, id, status, accrual)
}

// ValidateNumber mocks base method.
func (m *MockOrdersService) ValidateNumber(ctx context.Context, orderNum models.OrderNum) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateNumber", ctx, orderNum)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateNumber indicates an expected call of ValidateNumber.
func (mr *MockOrdersServiceMockRecorder) ValidateNumber(ctx, orderNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateNumber", reflect.TypeOf((*MockOrdersService)(nil).ValidateNumber), ctx, orderNum)
}

// MockAccountsService is a mock of AccountsService interface.
type MockAccountsService struct {
	ctrl     *gomock.Controller
	recorder *MockAccountsServiceMockRecorder
}

// MockAccountsServiceMockRecorder is the mock recorder for MockAccountsService.
type MockAccountsServiceMockRecorder struct {
	mock *MockAccountsService
}

// NewMockAccountsService creates a new mock instance.
func NewMockAccountsService(ctrl *gomock.Controller) *MockAccountsService {
	mock := &MockAccountsService{ctrl: ctrl}
	mock.recorder = &MockAccountsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountsService) EXPECT() *MockAccountsServiceMockRecorder {
	return m.recorder
}

// GetAccountByUserId mocks base method.
func (m *MockAccountsService) GetAccountByUserId(ctx context.Context, id models.UserId) (models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByUserId", ctx, id)
	ret0, _ := ret[0].(models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByUserId indicates an expected call of GetAccountByUserId.
func (mr *MockAccountsServiceMockRecorder) GetAccountByUserId(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByUserId", reflect.TypeOf((*MockAccountsService)(nil).GetAccountByUserId), ctx, id)
}

// GetAccountInfoByUserId mocks base method.
func (m *MockAccountsService) GetAccountInfoByUserId(ctx context.Context, id models.UserId) (models.AccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountInfoByUserId", ctx, id)
	ret0, _ := ret[0].(models.AccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountInfoByUserId indicates an expected call of GetAccountInfoByUserId.
func (mr *MockAccountsServiceMockRecorder) GetAccountInfoByUserId(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountInfoByUserId", reflect.TypeOf((*MockAccountsService)(nil).GetAccountInfoByUserId), ctx, id)
}

// GetWithdrawals mocks base method.
func (m *MockAccountsService) GetWithdrawals(ctx context.Context, id models.UserId) (models.WithdrawalsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawals", ctx, id)
	ret0, _ := ret[0].(models.WithdrawalsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawals indicates an expected call of GetWithdrawals.
func (mr *MockAccountsServiceMockRecorder) GetWithdrawals(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawals", reflect.TypeOf((*MockAccountsService)(nil).GetWithdrawals), ctx, id)
}

// UpdateBalance mocks base method.
func (m *MockAccountsService) UpdateBalance(ctx context.Context, id models.AccountId, amount int) (models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", ctx, id, amount)
	ret0, _ := ret[0].(models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockAccountsServiceMockRecorder) UpdateBalance(ctx, id, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockAccountsService)(nil).UpdateBalance), ctx, id, amount)
}

// Withdraw mocks base method.
func (m *MockAccountsService) Withdraw(ctx context.Context, id models.AccountId, amount int, orderNum models.OrderNum) (models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, id, amount, orderNum)
	ret0, _ := ret[0].(models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockAccountsServiceMockRecorder) Withdraw(ctx, id, amount, orderNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockAccountsService)(nil).Withdraw), ctx, id, amount, orderNum)
}

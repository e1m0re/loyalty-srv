// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"
	models "e1m0re/loyalty-srv/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// AccountsService is an autogenerated mock type for the AccountsService type
type AccountsService struct {
	mock.Mock
}

// GetAccountByUserId provides a mock function with given fields: ctx, id
func (_m *AccountsService) GetAccountByUserId(ctx context.Context, id models.UserId) (*models.Account, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountByUserId")
	}

	var r0 *models.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UserId) (*models.Account, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UserId) *models.Account); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UserId) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountInfoByUserId provides a mock function with given fields: ctx, id
func (_m *AccountsService) GetAccountInfoByUserId(ctx context.Context, id models.UserId) (*models.AccountInfo, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountInfoByUserId")
	}

	var r0 *models.AccountInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UserId) (*models.AccountInfo, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UserId) *models.AccountInfo); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AccountInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UserId) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWithdrawals provides a mock function with given fields: ctx, id
func (_m *AccountsService) GetWithdrawals(ctx context.Context, id models.UserId) (*[]models.Withdrawal, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetWithdrawals")
	}

	var r0 *[]models.Withdrawal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UserId) (*[]models.Withdrawal, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UserId) *[]models.Withdrawal); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Withdrawal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UserId) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBalance provides a mock function with given fields: ctx, id, amount
func (_m *AccountsService) UpdateBalance(ctx context.Context, id models.AccountId, amount int) (*models.Account, error) {
	ret := _m.Called(ctx, id, amount)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBalance")
	}

	var r0 *models.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.AccountId, int) (*models.Account, error)); ok {
		return rf(ctx, id, amount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.AccountId, int) *models.Account); ok {
		r0 = rf(ctx, id, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.AccountId, int) error); ok {
		r1 = rf(ctx, id, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Withdraw provides a mock function with given fields: ctx, id, amount, orderNum
func (_m *AccountsService) Withdraw(ctx context.Context, id models.AccountId, amount int, orderNum models.OrderNum) (*models.Account, error) {
	ret := _m.Called(ctx, id, amount, orderNum)

	if len(ret) == 0 {
		panic("no return value specified for Withdraw")
	}

	var r0 *models.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.AccountId, int, models.OrderNum) (*models.Account, error)); ok {
		return rf(ctx, id, amount, orderNum)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.AccountId, int, models.OrderNum) *models.Account); ok {
		r0 = rf(ctx, id, amount, orderNum)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.AccountId, int, models.OrderNum) error); ok {
		r1 = rf(ctx, id, amount, orderNum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAccountsService creates a new instance of AccountsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountsService {
	mock := &AccountsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

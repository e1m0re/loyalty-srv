// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"
	models "e1m0re/loyalty-srv/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// OrdersProcessor is an autogenerated mock type for the OrdersProcessor type
type OrdersProcessor struct {
	mock.Mock
}

// CheckProcessingOrders provides a mock function with given fields: ctx
func (_m *OrdersProcessor) CheckProcessingOrders(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CheckProcessingOrders")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecalculateProcessedOrders provides a mock function with given fields: ctx
func (_m *OrdersProcessor) RecalculateProcessedOrders(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RecalculateProcessedOrders")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequestOrdersStatus provides a mock function with given fields: ctx, orderNum
func (_m *OrdersProcessor) RequestOrdersStatus(ctx context.Context, orderNum models.OrderNum) (*models.OrdersStatusInfo, int64, error) {
	ret := _m.Called(ctx, orderNum)

	if len(ret) == 0 {
		panic("no return value specified for RequestOrdersStatus")
	}

	var r0 *models.OrdersStatusInfo
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, models.OrderNum) (*models.OrdersStatusInfo, int64, error)); ok {
		return rf(ctx, orderNum)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.OrderNum) *models.OrdersStatusInfo); ok {
		r0 = rf(ctx, orderNum)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrdersStatusInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.OrderNum) int64); ok {
		r1 = rf(ctx, orderNum)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, models.OrderNum) error); ok {
		r2 = rf(ctx, orderNum)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewOrdersProcessor creates a new instance of OrdersProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrdersProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrdersProcessor {
	mock := &OrdersProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
